#Program is user interface for automating the graphing of excel files. 
#If excel sheet has multiple sheets, program will look through all sheets to compile relevant data

import matplotlib.pyplot as plt
import xlrd
import csv

workbook=xlrd.open_workbook('04032016.xlsx')

sheet_list=[]

for i in xrange(0, workbook.nsheets):
	current_sheet=workbook.sheet_by_index(i)
	sheet_list.append(current_sheet)

data_list=[]

for j in xrange(0, len(sheet_list)): 
	sheet_data=[]
	for x in xrange(0,sheet_list[j].ncols):
		col=[]
		for y in xrange(0,sheet_list[j].nrows):
			col.append(sheet_list[j].cell(y,x).value)
		sheet_data.append(col)
	data_list.append(sheet_data)

def fullTitleList(data_list):
	full_title_list=[]
	for i in xrange(0,len(data_list)-1):
		full_title_list.append(data_list[i][0][0].encode("ascii"))
	return full_title_list

def graphData(data_list, data_names2plot):
	#list containing full data with data name and values
	tmpdata=[]

	for name in data_names2plot:
		for i in xrange(0,len(data_list)-1):
			xtmpvar=[]
			ytmpvar=[]
			if data_list[i][0][0]==name:
				if data_list[i][1][0]=="Potential applied (V)":
					for y in data_list[i][3]:
						ytmpvar.append(y)
					for x in data_list[i][6]:
						xtmpvar.append(x)
				elif data_list[i][1][0]=="Time (s)":
					for y in data_list[i][3]:
						ytmpvar.append(y)
					for x in data_list[i][1]:
						xtmpvar.append(x)
				else:
					print "error"
				tmpdata.append(xtmpvar)
				tmpdata.append(ytmpvar)			
	return tmpdata
	
def graphFunction(tmpdata, data_labels):
	#format data_list x1,y1,x2,y2,x3,y3...etc.
	new_data_list=[]
	#format data_name_list xname1,yname1,xname2 ...
	data_name_list=[]

	for i in xrange(0,len(tmpdata)):
		tmpname=[]
		newdata=[]
		for j in xrange(0,len(tmpdata[i])):
			if j==0:
				tmpname.append(str(tmpdata[i][j]).encode("ascii"))
			else:
				newdata.append(tmpdata[i][j])
		data_name_list.append(tmpname)
		new_data_list.append(newdata)	
	count=0
	labelcount=0
	while count<len(data_name_list):	
		plt.plot(new_data_list[count],new_data_list[count+1],label=data_labels[labelcount])
		count+=2
		labelcount+=1
	#converts unicode data_name_list to ascii
	[str(x) for x in data_name_list]	

	xaxis=str(data_name_list[0]).replace('[','').replace(']','')
	yaxis=str(data_name_list[1]).replace('[','').replace(']','')

	plt.xlabel(xaxis)
	plt.ylabel(yaxis)
	plt.title(yaxis+" vs "+xaxis)
	plt.legend()
	plt.legend(bbox_to_anchor=(1.05,1),loc=2,borderaxespad=0.)
	plt.show()

#>>>>>>>USER INTERPHASE<<<<<<<	
num_datasets=int(raw_input("Hello there! How many datasets would you like to plot?\n"))
print "Choose from list of data names to graph\n"
print fullTitleList(data_list)
print "\n You can choose to plot based on index number or complete title"

data_names2plot=[]

for i in xrange(0,num_datasets):
	data_name=raw_input("input data string\n")
	data_names2plot.append(data_name)

print "So you want to plot these datasets?\n"
print data_names2plot

input=raw_input("y/n\n")
if input=="y":
	data_labels=[]
	print "what are the data labels you want?"
	for name in data_names2plot:
		data_labels.append(raw_input("for "+name+"?\n"))
	graphFunction(graphData(data_list,data_names2plot),data_labels)
